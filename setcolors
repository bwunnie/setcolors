#!/bin/bash

# setcolors - Apply color scheme from image using pywal
# Usage: setcolors -i IMAGE_PATH [-b]

show_help() {
    echo "Usage: setcolors -i IMAGE_PATH [-b]"
    echo ""
    echo "Options:"
    echo "  -i IMAGE_PATH    Path to image file for color generation"
    echo "  -b              Set image as desktop background"
    echo "  -h              Show this help message"
    echo ""
    echo "Examples:"
    echo "  setcolors -i ~/Pictures/wallpaper.jpg"
    echo "  setcolors -i ~/Pictures/wallpaper.jpg -b"
    echo ""
    echo "Note: This script will automatically install/remove pywal using pipx as needed."
}

# Initialize variables
IMAGE_PATH=""
SET_BACKGROUND=false
PYWAL_INSTALLED_BY_SCRIPT=false

# Cleanup function
cleanup_pywal() {
    if [ "$PYWAL_INSTALLED_BY_SCRIPT" = true ]; then
        echo "Cleaning up temporary pywal installation..."
        pipx uninstall pywal >/dev/null 2>&1
        echo "âœ“ Temporary pywal installation removed"
    fi
}

# Set trap to cleanup on script exit
trap cleanup_pywal EXIT

# Function to ensure pywal is available
ensure_pywal() {
    # Check if wal command is available
    if command -v wal &> /dev/null; then
        echo "âœ“ pywal is already available"
        return 0
    fi
    
    # Check if pipx is installed
    if ! command -v pipx &> /dev/null; then
        echo "Error: pipx is required but not installed. Install it with:"
        echo "sudo apt install pipx"
        exit 1
    fi
    
    echo "Installing pywal temporarily with pipx..."
    if pipx install pywal >/dev/null 2>&1; then
        PYWAL_INSTALLED_BY_SCRIPT=true
        echo "âœ“ pywal installed temporarily"
        
        # Make sure pipx bin is in PATH for this session
        export PATH="$HOME/.local/bin:$PATH"
        
        # Verify installation worked
        if ! command -v wal &> /dev/null; then
            echo "Error: Failed to make pywal available after installation"
            exit 1
        fi
    else
        echo "Error: Failed to install pywal with pipx"
        exit 1
    fi
}

# Parse command line arguments
while getopts "i:bh" opt; do
    case $opt in
        i)
            IMAGE_PATH="$OPTARG"
            ;;
        b)
            SET_BACKGROUND=true
            ;;
        h)
            show_help
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            show_help
            exit 1
            ;;
    esac
done

# Check if image path is provided
if [ -z "$IMAGE_PATH" ]; then
    echo "Error: Image path is required"
    show_help
    exit 1
fi

# Check if image file exists
if [ ! -f "$IMAGE_PATH" ]; then
    echo "Error: Image file '$IMAGE_PATH' not found"
    exit 1
fi

# Get absolute path
IMAGE_PATH=$(realpath "$IMAGE_PATH")

echo "Generating color scheme from: $IMAGE_PATH"

# Ensure pywal is available
ensure_pywal

# Generate colors with pywal
echo "Generating colors with pywal..."
wal -i "$IMAGE_PATH" -n -q

if [ $? -ne 0 ]; then
    echo "Error: Failed to generate colors from image"
    exit 1
fi

# Set desktop background if -b flag is used
if [ "$SET_BACKGROUND" = true ]; then
    echo "Setting desktop background..."
    gsettings set org.gnome.desktop.background picture-uri "file://$IMAGE_PATH"
    gsettings set org.gnome.desktop.background picture-uri-dark "file://$IMAGE_PATH"
    gsettings set org.gnome.desktop.background picture-options 'zoom'
fi

# Apply colors to GNOME Terminal
echo "Applying colors to GNOME Terminal..."

# Source the colors generated by pywal
if [ -f "${HOME}/.cache/wal/colors.sh" ]; then
    source "${HOME}/.cache/wal/colors.sh"
    
    # Get the default terminal profile
    PROFILE_ID=$(gsettings get org.gnome.Terminal.ProfilesList default 2>/dev/null | tr -d "'")
    
    if [ -z "$PROFILE_ID" ]; then
        echo "Warning: Could not get default terminal profile"
    else
        PROFILE_PATH="/org/gnome/terminal/legacy/profiles:/:$PROFILE_ID/"
        
        # Build the palette string for GNOME Terminal
        PALETTE="['$color0', '$color1', '$color2', '$color3', '$color4', '$color5', '$color6', '$color7', '$color8', '$color9', '$color10', '$color11', '$color12', '$color13', '$color14', '$color15']"
        
        # Apply the color scheme to GNOME Terminal
        gsettings set org.gnome.Terminal.Legacy.Profile:"$PROFILE_PATH" use-theme-colors false
        gsettings set org.gnome.Terminal.Legacy.Profile:"$PROFILE_PATH" palette "$PALETTE"
        gsettings set org.gnome.Terminal.Legacy.Profile:"$PROFILE_PATH" background-color "$background"
        gsettings set org.gnome.Terminal.Legacy.Profile:"$PROFILE_PATH" foreground-color "$foreground"
        gsettings set org.gnome.Terminal.Legacy.Profile:"$PROFILE_PATH" use-transparent-background "$CURRENT_TRANSPARENCY"
        
        echo "âœ“ Terminal colors applied successfully"
    fi
else
    echo "Warning: Pywal colors file not found at ${HOME}/.cache/wal/colors.sh"
fi

# Apply colors to other applications
echo "Applying colors to supported applications..."

# Update Xresources (for compatibility with some applications)
if command -v xrdb &> /dev/null; then
    if [ -f "${HOME}/.cache/wal/colors.Xresources" ]; then
        xrdb -merge "${HOME}/.cache/wal/colors.Xresources" 2>/dev/null
        echo "âœ“ Xresources updated (for app compatibility)"
    fi
fi

# Create/update shell color exports for current session
if [ -f "${HOME}/.cache/wal/colors.sh" ]; then
    # Export colors to current shell session
    source "${HOME}/.cache/wal/colors.sh"
    
    # Update shell rc files for persistence
    for rcfile in ~/.bashrc ~/.zshrc; do
        if [ -f "$rcfile" ]; then
            # Remove old pywal source lines if they exist
            sed -i '/# Import colorscheme from pywal/d' "$rcfile"
            sed -i '/source.*wal.*colors\.sh/d' "$rcfile"
            sed -i '/cat.*wal.*sequences/d' "$rcfile"
            
            # Add new pywal source lines
            echo "" >> "$rcfile"
            echo "# Import colorscheme from pywal" >> "$rcfile"
            echo "(cat ~/.cache/wal/sequences &) 2>/dev/null" >> "$rcfile"
            echo "source ~/.cache/wal/colors.sh 2>/dev/null" >> "$rcfile"
        fi
    done
    echo "âœ“ Shell configuration updated for persistence"
fi

# Send escape sequences to update terminal colors immediately
if [ -f "${HOME}/.cache/wal/sequences" ]; then
    cat "${HOME}/.cache/wal/sequences"
fi

echo ""
echo "ðŸŽ¨ Color scheme applied successfully!"
echo "âœ“ Terminal colors updated"
if [ "$SET_BACKGROUND" = true ]; then
    echo "âœ“ Desktop background set"
fi
echo ""
echo "The new color scheme is now active in:"
echo "  - Current and new terminal sessions"
echo "  - fastfetch and other system info tools"
echo "  - Applications that support pywal/Xresources"
echo ""
echo "Colors are saved in: ${HOME}/.cache/wal/"

# Note: cleanup_pywal() will be called automatically via the EXIT trap
